// <auto-generated />
using System;
using CarWash_App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarWash_App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221205161958_Seed")]
    partial class Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarWash_App.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnOwner")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "838C5B52-9F4F-435E-809D-BD7D5864BB5E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "526b1964-bded-4515-ba0d-0a53d7e70b91",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Administrator",
                            IsAnOwner = false,
                            LastName = "Arministrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKQ4lXhCAmW25Erfa3VavmPxPfaFBM5cE57LyF5X/RypYP7LFRPE+YfSVAjNRya0FQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a6e1ed7-e7fd-4d81-8f39-fe274058867b",
                            TwoFactorEnabled = false,
                            UserName = "admin.admin"
                        },
                        new
                        {
                            Id = "FBB5FC51-4270-48C1-BADD-A441FF5759F3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81a13e26-4376-4bf1-aa9d-4b6a5144ae10",
                            Email = "mihailo.simic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mihailo",
                            IsAnOwner = true,
                            LastName = "Simic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIHAILO.SIMIC@GMAIL.COM",
                            NormalizedUserName = "MIHAILO.SIMIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEDZevxryJyRwL11AAIzpaXZyy++IPZ67hHB/41P+a5homYVcMrZ42JIlV41Td6ZROw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "470269f7-35a2-4bfd-9fa9-de63ac1d0e1b",
                            TwoFactorEnabled = false,
                            UserName = "mihailo.simic"
                        },
                        new
                        {
                            Id = "8F0A1391-5547-43F0-AEC9-59908CB381D9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7984954-f0f4-4570-a8ce-1ab1138bea53",
                            Email = "stefanija.markovic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefanija",
                            IsAnOwner = true,
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFANIJA.MARKOVIC@GMAIL.COM",
                            NormalizedUserName = "STEFANIJA.MARKOVIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEOQdrSfZHka5DwhDmP//bW5NcMhZBKz5tK0wXb1afaizmQe9nLxHuZGt9EyNXS/d+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd6cdcd9-dfff-4ec2-8def-e834f8e00489",
                            TwoFactorEnabled = false,
                            UserName = "stefanija.markovic"
                        },
                        new
                        {
                            Id = "4FE7601C-53C2-467B-8F0B-6AB8F048C680",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5967905-a00f-4545-8486-8e1ff4c2b46e",
                            Email = "pera.peric@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pera",
                            IsAnOwner = true,
                            LastName = "Peric",
                            LockoutEnabled = false,
                            NormalizedEmail = "PERA.PERIC@GMAIL.COM",
                            NormalizedUserName = "PERA.PERIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEEobRhuNLlTr1wEu+82T3TbqXlozIwcJRJW9HcWYU93eFaSGUpv9hQd5/jSbagAZSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "820294cd-813e-4c3a-aa0a-36c6961d67b8",
                            TwoFactorEnabled = false,
                            UserName = "pera.peric"
                        },
                        new
                        {
                            Id = "BB4077EC-96BD-4FF9-8365-F522AF43ED30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06a9e767-ef9e-485a-afc7-7f681081aaf7",
                            Email = "laza.lazic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Laza",
                            IsAnOwner = true,
                            LastName = "Lazic",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAZA.LAZIC@GMAIL.COM",
                            NormalizedUserName = "LAZA.LAZIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEP3yuaKr/SYI6DgAqWN4hoAZLdMtJKYTgFozq2j9D3uXnkEZAHxO6DFaxqDBn7ufZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cbed408c-dc34-4bc6-bbb5-3f53722ca2f6",
                            TwoFactorEnabled = false,
                            UserName = "laza.lazic"
                        },
                        new
                        {
                            Id = "E8560300-CD67-45FB-B07F-7713F45D131A",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db19703f-21c7-48df-a9ac-9fc4e15c9c9c",
                            Email = "mika.mikic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mika",
                            IsAnOwner = true,
                            LastName = "Mikic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKA.MIKIC@GMAIL.COM",
                            NormalizedUserName = "MIKA.MIKIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEGpNaK8G1mUTfLIVozEKWFxp+DyoXo0QlHCqvTvklsRmGQL4LYL1/gcSWT6blOTmfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5570e2c7-4a31-47d5-8782-0f34bc056d77",
                            TwoFactorEnabled = false,
                            UserName = "mika.mikic"
                        },
                        new
                        {
                            Id = "722D96C6-60D1-4233-B41E-D788E2451D4F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75531d3d-0e6d-4995-bb98-1c0f3cafcb85",
                            Email = "ana.anic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ana",
                            IsAnOwner = false,
                            LastName = "Anic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANA.ANIC@GMAIL.COM",
                            NormalizedUserName = "ANA.ANIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEBnGTQMGKpcOsszIlaJkFpqZu5ZhCyXRG20hUQv8zVImeJpa1PqxX3qN9900Hhb9qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ac2d38f-8716-4497-8345-de48ccb5315e",
                            TwoFactorEnabled = false,
                            UserName = "ana.anic"
                        },
                        new
                        {
                            Id = "264249DB-C9DC-4827-A5D0-D7494C1086FD",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc75ddc4-a3b6-4ef1-83cd-b343fd450afe",
                            Email = "jovan.jovic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jovan",
                            IsAnOwner = false,
                            LastName = "Jovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOVAN.JOVIC@GMAIL.COM",
                            NormalizedUserName = "JOVAN.JOVIC",
                            PasswordHash = "AQAAAAEAACcQAAAAELdHHA8EN7CwerhMu7KMis4Ihn7nUNeefKRtRMEv7Niq6NSvHVETk7K14h2YVXl9KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7681982e-e7c7-4e97-bfad-ee20b92ad8cc",
                            TwoFactorEnabled = false,
                            UserName = "jovan.jovic"
                        },
                        new
                        {
                            Id = "7949B386-70FB-403D-9692-8BE9DCF2BC1E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6011d8c-53c4-4b18-bdef-a92b7b4ed2d9",
                            Email = "milovan.milovanovic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Milovan",
                            IsAnOwner = false,
                            LastName = "Milovanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILOVAN.MILOVANOVIC@GMAIL.COM",
                            NormalizedUserName = "MILOVAN.MILOVANOVIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEHxC5dCtFzpScHummTSjnk8uGkA6UZ2Xh5+b99MBZ/zjGVZvZKwCHS9tc1PVR86s9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "292a801d-6cf8-4fa5-abbf-67b6eeb1cfeb",
                            TwoFactorEnabled = false,
                            UserName = "milovan.milovanovic"
                        },
                        new
                        {
                            Id = "193E7C46-91A2-4F45-9E11-44964496FB0F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88c7427b-1565-4d06-a9f4-92bcf056ae44",
                            Email = "petar.petrovic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IsAnOwner = false,
                            LastName = "Petrovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.PETROVIC@GMAIL.COM",
                            NormalizedUserName = "PETAR.PETROVIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEA26SAWxl5BIx1wdxzZWqwkGoW3cdGNVYTGclotyslVwvUy03lcrxDOi0i3U76CnMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f86c332-9675-428c-8cf7-15db66fe86ba",
                            TwoFactorEnabled = false,
                            UserName = "petar.petrovic"
                        },
                        new
                        {
                            Id = "C3F0EF4D-A5A1-46CE-91CF-4443B95734C6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdf69d30-7d69-4fd0-ba97-a3cab2f7e157",
                            Email = "milan.milanovic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Milan",
                            IsAnOwner = false,
                            LastName = "Milanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILAN.MILANOVIC@GMAIL.COM",
                            NormalizedUserName = "MILAN.MILANOVIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ0z+1meueGwsJwHYtoSaVgpp8i0fOYM76eCsrInQFJJtlOipTatwy3AMF264E1+gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5142f691-58b9-4ad7-a4b1-d102844d910c",
                            TwoFactorEnabled = false,
                            UserName = "milan.milanovic"
                        });
                });

            modelBuilder.Entity("CarWash_App.Entities.CarWash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CarWashName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClosingTime")
                        .HasColumnType("int");

                    b.Property<int>("OpeningTime")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Profit")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("carWashes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarWashName = "CarWashExtra",
                            ClosingTime = 17,
                            OpeningTime = 9,
                            OwnerId = "FBB5FC51-4270-48C1-BADD-A441FF5759F3",
                            Profit = 0f
                        },
                        new
                        {
                            Id = 2,
                            CarWashName = "MegaWash",
                            ClosingTime = 22,
                            OpeningTime = 12,
                            OwnerId = "FBB5FC51-4270-48C1-BADD-A441FF5759F3",
                            Profit = 0f
                        },
                        new
                        {
                            Id = 3,
                            CarWashName = "StecoPoint",
                            ClosingTime = 15,
                            OpeningTime = 6,
                            OwnerId = "8F0A1391-5547-43F0-AEC9-59908CB381D9",
                            Profit = 0f
                        },
                        new
                        {
                            Id = 4,
                            CarWashName = "4U2Wash",
                            ClosingTime = 24,
                            OpeningTime = 0,
                            OwnerId = "4FE7601C-53C2-467B-8F0B-6AB8F048C680",
                            Profit = 0f
                        });
                });

            modelBuilder.Entity("CarWash_App.Entities.CarWashesServiceTypes", b =>
                {
                    b.Property<int>("CarWashId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("CarWashId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("CarWashesServiceTypes");

                    b.HasData(
                        new
                        {
                            CarWashId = 1,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            CarWashId = 1,
                            ServiceTypeId = 2
                        },
                        new
                        {
                            CarWashId = 1,
                            ServiceTypeId = 3
                        },
                        new
                        {
                            CarWashId = 2,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            CarWashId = 2,
                            ServiceTypeId = 2
                        },
                        new
                        {
                            CarWashId = 3,
                            ServiceTypeId = 2
                        },
                        new
                        {
                            CarWashId = 3,
                            ServiceTypeId = 3
                        },
                        new
                        {
                            CarWashId = 4,
                            ServiceTypeId = 1
                        });
                });

            modelBuilder.Entity("CarWash_App.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CarWashId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EligibleForCancelation")
                        .HasColumnType("bit");

                    b.Property<bool>("PaymentCollected")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarWashId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CarWash_App.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 2.5f,
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            ServiceName = "Regular"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 4.5f,
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            ServiceName = "Extended"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 8.75f,
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ServiceName = "Premium"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Admin",
                            UserId = "838C5B52-9F4F-435E-809D-BD7D5864BB5E"
                        },
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Owner",
                            UserId = "8F0A1391-5547-43F0-AEC9-59908CB381D9"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Owner",
                            UserId = "FBB5FC51-4270-48C1-BADD-A441FF5759F3"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Owner",
                            UserId = "4FE7601C-53C2-467B-8F0B-6AB8F048C680"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Owner",
                            UserId = "BB4077EC-96BD-4FF9-8365-F522AF43ED30"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Owner",
                            UserId = "E8560300-CD67-45FB-B07F-7713F45D131A"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Customer",
                            UserId = "722D96C6-60D1-4233-B41E-D788E2451D4F"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Customer",
                            UserId = "264249DB-C9DC-4827-A5D0-D7494C1086FD"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Customer",
                            UserId = "7949B386-70FB-403D-9692-8BE9DCF2BC1E"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Customer",
                            UserId = "193E7C46-91A2-4F45-9E11-44964496FB0F"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Customer",
                            UserId = "C3F0EF4D-A5A1-46CE-91CF-4443B95734C6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarWash_App.Entities.CarWash", b =>
                {
                    b.HasOne("CarWash_App.Entities.ApplicationUser", "Owner")
                        .WithMany("CarWashes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarWash_App.Entities.CarWashesServiceTypes", b =>
                {
                    b.HasOne("CarWash_App.Entities.CarWash", "CarWash")
                        .WithMany("CarWashesServiceTypes")
                        .HasForeignKey("CarWashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWash_App.Entities.ServiceType", "ServiceType")
                        .WithMany("CarWashesServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarWash");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("CarWash_App.Entities.Service", b =>
                {
                    b.HasOne("CarWash_App.Entities.CarWash", "CarWash")
                        .WithMany("Services")
                        .HasForeignKey("CarWashId");

                    b.HasOne("CarWash_App.Entities.ApplicationUser", "Customer")
                        .WithMany("Services")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWash_App.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarWash");

                    b.Navigation("Customer");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarWash_App.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarWash_App.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWash_App.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarWash_App.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarWash_App.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CarWashes");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("CarWash_App.Entities.CarWash", b =>
                {
                    b.Navigation("CarWashesServiceTypes");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("CarWash_App.Entities.ServiceType", b =>
                {
                    b.Navigation("CarWashesServiceTypes");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
